spark {
  app {
    master = "local"
    name = "Telelog Spark Streaming Ingestion"
    bkmaster = "local[2]"
    bkname = "Telelog Kafka Messages Backup"
  }

  hdfs {
    vcd.data.path = "/data/data_lake/vehicle/Telelog/data/DW_VHCL_TELELOG_VCD"
    se.data.path = "/data/data_lake/vehicle/Telelog/data/DW_VHCL_TELELOG_SE"
    stf.data.path = "/data/data_lake/vehicle/Telelog/data/DW_VHCL_TELELOG_STF"
    error.log.path = "/data/data_lake/telelogv2.0/reservoir/errorLog"

    raw.data.bkp.path = "/data/raw_data/telelogv2.0/"
  }

  kafka {
    auto.offset.reset = "largest"
    enable.auto.commit = "true"
    group.id = "stream-kafka"
    bkp.group.id = "kafka-msg-bkp"
    key.deserializer.class.config = "org.apache.kafka.common.serialization.ByteArrayDeserializer"
    value.deserializer.class.config = "org.apache.kafka.common.serialization.ByteArrayDeserializer"
    batch.duration {
      duration = 3
      type = "Seconds" # Can be Milliseconds, Seconds, Minutes. Case insensitive.
    }

    //bootstrap.servers = "icdca0000022.cn.isn.corpintra.net:6667,icdca0000023.cn.isn.corpintra.net:6667"
    bootstrap.servers = "localhost:9092"
    topics {
      se.topic.list = ["TST_teg_se"]
      stf.topic.list = ["TST_teg_stf"]
      vcd.topic.list = ["TST_teg_vcd"]

      vcd.topic.str = "TST_teg_vcd"
      se.topic.str = "TST_teg_se"
      stf.topic.str = "TST_teg_stf"
    }

    security {
      protocol = "SASL_PLAINTEXT"
      service.name = "kafka"
      isUsingSsl = false
      truststore.location = "/etc/cdep-ssl-conf/CA_STANDARD/truststore.jks"
      truststore.password =  "hortonworks"
    }
  }

  zookeeper {
   // quorum = "icdca0000015.cn.isn.corpintra.net:2181,icdca0000016.cn.isn.corpintra.net:2181,icdca0000017.cn.isn.corpintra.net:2181"
    quorum = "localhost:2181"
    port = 2181
    znode.parent = "/telelogv2Offsets"
  }

}